#!/usr/bin/env coffee

# Module dependencies.
app   = require '../app'
debug = require('debug')('mdn-express-locallibrary:server')
http  = require 'http'

# Normalize a port into a number, string, or false.
normalizePort = (val) ->
	port = parseInt val, 10

	# named pipe
	return val if isNaN port

	# port number
	return port if port >= 0

	return false

# Event listener for HTTP server "error" event.
onError = (error) ->
	unless error.syscall is 'listen'
		throw error

	bind = "#{typeof(port) is 'string' and 'Pipe' or 'Port'} #{port}"

	# handle specific listen errors with friendly messages
	switch error.code
		when 'EACCES'
			console.error "#{bind} requires elevated privileges"
			process.exit 1
		when 'EADDRINUSE'
			console.error "#{bind} is already in use"
			process.exit 1
		else
			throw error

# Event listener for HTTP server "listening" event.
onListening = ->
	addr = server.address()

	bind = switch typeof(addr)
		when 'string' then "pipe #{addr}"
		else               "port #{addr.port}"

	debug "Listening on #{bind}"

# Get port from environment and store in Express.
PORT = normalizePort process.env.PORT ? '3000'
app.set 'port', PORT

# Create HTTP server.
server = http.createServer app

server.on 'error',     onError
server.on 'listening', onListening

# Listen on provided port, on all network interfaces.
server.listen PORT
